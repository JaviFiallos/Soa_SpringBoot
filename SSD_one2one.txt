
@Entity
@Table(name="estudiantes")
@Data
public class Estudiante {

    @Id
    private String cedula;
    private String nombre;
    private String apellido;
    private String direccion;
    private String telefono;

    @ManyToOne
    @JoinColumn(name = "id_materia")
    private Materia materia;
}
/////////////////////////////////////

@Data
@Entity
@Table(name="materias")
public class Materia {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer idMateria;

    private String nombre;

    @OneToMany(mappedBy = "materia")
    private List<Estudiante> estudiantes;
}
/////////////////////////////////////

@Repository
public interface MateriaRepository extends JpaRepository<Materia, Integer> {
}

/////////////////////////////////////


@Repository
public interface EstudianteRepository extends JpaRepository <Estudiante, String> {
    List<Estudiante> findByMateria(Materia materia);
}

/////////////////////////////////////

public interface EstudianteService {

    Estudiante createStudent(Estudiante estudiante);
    Estudiante updateStudent(Estudiante estudiante);
    List<Estudiante> getStudents();
    void deleteStudent(String cedula);
    Estudiante findStudent(String cedula);
    List<Materia> obtenerMaterias();  // Nuevo método para obtener las materias
    List<Estudiante> obtenerEstudiantesPorMateria(Integer idMateria); // Nuevo método para filtrar estudiantes
}


/////////////////////////////////////

@Service
public class EstudianteServiceImpl implements EstudianteService {

    @Autowired
    EstudianteRepository estudianteRepository;

    @Autowired
    private MateriaRepository materiaRepository;

    @Override
    public Estudiante createStudent(Estudiante estudiante) {
        return estudianteRepository.save(estudiante);
    }

    @Override
    public Estudiante updateStudent(Estudiante estudiante) {
        return estudianteRepository.save(estudiante);
    }

    @Override
    public List<Estudiante> getStudents() {
        return estudianteRepository.findAll();
    }

    @Override
    public void deleteStudent(String cedula) {
        Estudiante estudiante = estudianteRepository.findById(cedula)
                .orElseThrow(()-> new ResponseStatusException(HttpStatus.NOT_FOUND));
        estudianteRepository.delete(estudiante);
    }

    @Override
    public Estudiante findStudent(String cedula) {
        Estudiante estudiante = estudianteRepository.findById(cedula)
                .orElseThrow(()-> new ResponseStatusException(HttpStatus.NOT_FOUND));
        return estudiante;
    }

    @Override
    public List<Materia> obtenerMaterias() {
        return materiaRepository.findAll();
    }

    @Override
    public List<Estudiante> obtenerEstudiantesPorMateria(Integer idMateria) {
        Materia materia = materiaRepository.findById(idMateria)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));
        return estudianteRepository.findByMateria(materia);
    }

/////////////////////////////////////

@Controller
@RequestMapping("/estudiantes")
public class EstudianteViewController {

    @Autowired
    private EstudianteService estudianteService;

    @GetMapping
    public String listarEstudiantes(@RequestParam(required = false) Integer idMateria, Model model) {
        List<Estudiante> estudiantes;
        if (idMateria != null) {
            estudiantes = estudianteService.obtenerEstudiantesPorMateria(idMateria);
        } else {
            estudiantes = estudianteService.getStudents();
        }
        model.addAttribute("estudiantes", estudiantes);
        model.addAttribute("materias", estudianteService.obtenerMaterias()); // Pasamos las materias al modelo
        return "lista";
    }

    @GetMapping("/nuevo")
    public String mostrarFormularioCrear(Model model) {
        model.addAttribute("estudiante", new Estudiante());
        model.addAttribute("materias", estudianteService.obtenerMaterias()); // También cargamos las materias en el formulario
        return "formulario";
    }

    @PostMapping("/guardar")
    public String saveStudent(Estudiante estudiante){
        estudianteService.createStudent(estudiante);
        return "redirect:/estudiantes";
    }

    @GetMapping("/editar/{cedula}")
    public String mostrarFormularioEditar(@PathVariable String cedula, Model model) {
        Estudiante estudiante = estudianteService.findStudent(cedula);
        model.addAttribute("estudiante", estudiante);
        model.addAttribute("materias", estudianteService.obtenerMaterias()); // Cargamos las materias
        return "formulario";
    }

    @GetMapping("/eliminar/{cedula}")
    public String deleteStudent(@PathVariable String cedula){
        estudianteService.deleteStudent(cedula);
        return "redirect:/estudiantes";
    }


    @GetMapping("/buscar")
    public String buscarEstudiante(@RequestParam(required = false) String cedula, Model model) {
        if (cedula == null || cedula.trim().isEmpty()) {
            model.addAttribute("estudiantes", estudianteService.getStudents());
        } else {
            Estudiante estudiante = estudianteService.findStudent(cedula);
            if (estudiante != null) {
                model.addAttribute("estudiantes", List.of(estudiante));
            } else {
                model.addAttribute("estudiantes", List.of());
                model.addAttribute("mensajeError", "No se encontró ningún estudiante con la cédula");
            }
        }
        return "lista";
    }


/////////////////////////////////////

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Lista de Estudiantes</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<div class="container mt-5">
    <h1 class="text-center mb-4">Lista de Estudiantes</h1>

    <form th:action="@{/estudiantes}" method="get">
        <div class="input-group">
            <select class="form-select" name="idMateria">
                <option value="" selected>Seleccionar Curso</option>
                <option th:each="materia : ${materias}" th:value="${materia.idMateria}" th:text="${materia.nombre}"></option>
            </select>
            <button class="btn btn-primary px-4" type="submit">Buscar</button>
        </div>
    </form>
    <br>

    <table class="table table-bordered table-hover">
        <thead class="table-dark">
        <tr>
            <th>Cédula</th>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Dirección</th>
            <th>Teléfono</th>
            <th>Materia</th>
            <th>Acciones</th>
        </tr>
        </thead>
        <tbody>
        <tr th:if="${#lists.isEmpty(estudiantes)}">
            <td colspan="6" class="text-center">No se encontraron estudiantes.</td>
        </tr>
        <tr th:each="estudiante : ${estudiantes}">
            <td th:text="${estudiante.cedula}"></td>
            <td th:text="${estudiante.nombre}"></td>
            <td th:text="${estudiante.apellido}"></td>
            <td th:text="${estudiante.direccion}"></td>
            <td th:text="${estudiante.telefono}"></td>
            <td th:text="${estudiante.materia.nombre}"></td>
            <td>
                <a th:href="@{/estudiantes/editar/{cedula}(cedula=${estudiante.cedula})}"
                   class="btn btn-warning btn-sm">Editar</a>
                <a th:href="@{/estudiantes/eliminar/{cedula}(cedula=${estudiante.cedula})}"
                   class="btn btn-danger btn-sm">Eliminar</a>
            </td>
        </tr>
        </tbody>
    </table>
    <div class="text-end mb-3">
        <a href="/estudiantes/nuevo" class="btn btn-primary">Agregar Estudiante</a>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

/////////////////////////////////////

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Formulario Estudiante</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<div class="container mt-5">
    <h1 th:if="${estudiante.cedula==null}" class="text-center mb-4">Agregar Estudiante</h1>
    <h1 th:if="${estudiante.cedula!=null}" class="text-center mb-4">Editar Estudiante</h1>

    <form th:action="@{/estudiantes/guardar}" th:object="${estudiante}"   method="post" class="mx-auto" style="max-width: 600px;">
        <div class="mb-3">
            <label for="cedula" class="form-label">Cédula</label>
            <input type="text" id="cedula" name="cedula" th:field="*{cedula}" class="form-control" required/>
        </div>
        <div class="mb-3">
            <label for="nombre" class="form-label">Nombre</label>
            <input type="text" id="nombre" name="nombre" th:field="*{nombre}" class="form-control" required/>
        </div>
        <div class="mb-3">
            <label for="apellido" class="form-label">Apellido</label>
            <input type="text" id="apellido" name="apellido" th:field="*{apellido}" class="form-control" required/>
        </div>
        <div class="mb-3">
            <label for="direccion" class="form-label">Dirección</label>
            <input type="text" id="direccion" name="direccion" th:field="*{direccion}" class="form-control" required/>
        </div>
        <div class="mb-3">
            <label for="telefono" class="form-label">Teléfono</label>
            <input type="text" id="telefono" name="telefono" th:field="*{telefono}" class="form-control" required/>
        </div>


        <div class="mb-3">
            <label for="id_materia" class="form-label">Materia</label>
            <select id="id_materia" name="materia.idMateria" th:field="*{materia.idMateria}" class="form-control" required>
                <option value="" th:selected="${estudiante.materia == null}">Seleccionar Curso</option>
                <option th:each="materia : ${materias}" th:value="${materia.idMateria}" th:text="${materia.nombre}"
                        th:selected="${materia.idMateria == estudiante.materia?.idMateria}"></option>
            </select>
        </div>

        <div class="text-center">
            <button type="submit" class="btn btn-success">Guardar</button>
            <a href="/estudiantes" class="btn btn-secondary">Cancelar</a>
        </div>
    </form>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

/////////////////////////////////////
